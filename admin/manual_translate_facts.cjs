const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Initialize Supabase client
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Manual translations - Add Hindi translations here
const translations = {
  // Example format:
  // "English text here": "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§Ø‡§π‡§æ‡§Å",

  // Ramayana facts
  "In the Ramayana, Hanuman's heart contains an image of Rama and Sita, discovered when his chest was opened by the gods to verify his devotion.": "‡§∞‡§æ‡§Æ‡§æ‡§Ø‡§£ ‡§Æ‡•á‡§Ç, ‡§π‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡•á ‡§π‡•É‡§¶‡§Ø ‡§Æ‡•á‡§Ç ‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§∏‡•Ä‡§§‡§æ ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§π‡•à, ‡§ú‡•ã ‡§â‡§®‡§ï‡•Ä ‡§≠‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•á‡§µ‡§§‡§æ‡§ì‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§â‡§®‡§ï‡•Ä ‡§õ‡§æ‡§§‡•Ä ‡§ñ‡•ã‡§≤‡•á ‡§ú‡§æ‡§®‡•á ‡§™‡§∞ ‡§ñ‡•ã‡§ú‡•Ä ‡§ó‡§à‡•§",

  // Mahabharata facts
  "The Mahabharata mentions that Krishna lifted Govardhan hill for 7 days straight, protecting the villagers from Indra's torrential rains.": "‡§Æ‡§π‡§æ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•É‡§∑‡•ç‡§£ ‡§®‡•á ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ 7 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§§‡§ï ‡§ó‡•ã‡§µ‡§∞‡•ç‡§ß‡§® ‡§™‡§∞‡•ç‡§µ‡§§ ‡§ï‡•ã ‡§â‡§†‡§æ‡§Ø‡§æ, ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§Ç‡§¶‡•ç‡§∞ ‡§ï‡•Ä ‡§Æ‡•Ç‡§∏‡§≤‡§ß‡§æ‡§∞ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§∏‡•á ‡§¨‡§ö‡§æ‡§Ø‡§æ‡•§",

  // Hindu Deities facts
  "Lord Ganesha wrote the entire Mahabharata as Sage Vyasa dictated it, breaking his tusk to use as a pen when his original one broke.": "‡§≠‡§ó‡§µ‡§æ‡§® ‡§ó‡§£‡•á‡§∂ ‡§®‡•á ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Æ‡§π‡§æ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•ã ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§µ‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡•á ‡§ï‡§π‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§≤‡§ø‡§ñ‡§æ, ‡§ú‡§¨ ‡§â‡§®‡§ï‡•Ä ‡§Æ‡•Ç‡§≤ ‡§ï‡§≤‡§Æ ‡§ü‡•Ç‡§ü ‡§ó‡§à ‡§§‡•ã ‡§Ö‡§™‡§®‡§æ ‡§¶‡§æ‡§Ç‡§§ ‡§§‡•ã‡§°‡§º‡§ï‡§∞ ‡§ï‡§≤‡§Æ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ‡•§",

  // Add more translations here as you get them translated...
};

async function exportFactsForTranslation() {
  try {
    console.log('üöÄ Exporting facts for translation...');

    // Fetch all facts that don't have Hindi translation
    const { data: facts, error } = await supabase
      .from('spiritual_facts')
      .select('id, text, text_hi, category')
      .or('text_hi.is.null,text_hi.eq.""')
      .order('category, id');

    if (error) {
      console.error('Error fetching facts:', error);
      return;
    }

    console.log(`üìä Found ${facts.length} facts to translate\n`);
    console.log('üìã Copy the facts below and get them translated to Hindi:');
    console.log('=' .repeat(80));

    facts.forEach((fact, index) => {
      console.log(`\n${index + 1}. [${fact.category}]`);
      console.log(`EN: ${fact.text}`);
      console.log(`HI: [TRANSLATE THIS]`);
      console.log('-'.repeat(40));
    });

    console.log('\n‚ú® Instructions:');
    console.log('1. Copy the English texts above');
    console.log('2. Get them translated to Hindi (use Google Translate, human translator, or AI)');
    console.log('3. Add the translations to the "translations" object in manual_translate_facts.js');
    console.log('4. Run: npm run update-translations');

  } catch (error) {
    console.error('üí• Error:', error);
  }
}

async function updateTranslations() {
  try {
    console.log('üöÄ Starting manual translation updates...');

    let updated = 0;
    let notFound = 0;

    for (const [englishText, hindiText] of Object.entries(translations)) {
      try {
        // Find the fact by English text
        const { data: facts, error } = await supabase
          .from('spiritual_facts')
          .select('id, text')
          .eq('text', englishText);

        if (error) {
          console.error('Error finding fact:', error);
          continue;
        }

        if (facts && facts.length > 0) {
          // Update with Hindi translation
          const { error: updateError } = await supabase
            .from('spiritual_facts')
            .update({ text_hi: hindiText })
            .eq('id', facts[0].id);

          if (updateError) {
            console.error('Error updating fact:', updateError);
          } else {
            updated++;
            console.log(`‚úÖ Updated: ${englishText.substring(0, 50)}...`);
          }
        } else {
          notFound++;
          console.log(`‚ùå Not found: ${englishText.substring(0, 50)}...`);
        }

      } catch (error) {
        console.error('Error processing translation:', error);
      }
    }

    console.log(`\nüìà Translation Update Summary:`);
    console.log(`‚úÖ Successfully updated: ${updated} facts`);
    console.log(`‚ùå Not found: ${notFound} facts`);
    console.log('üéâ Manual translation update completed!');

  } catch (error) {
    console.error('üí• Fatal error:', error);
  }
}

// Check command line argument
const command = process.argv[2];

if (command === 'export') {
  exportFactsForTranslation();
} else if (command === 'update') {
  updateTranslations();
} else {
  console.log('Usage:');
  console.log('  node manual_translate_facts.js export  - Export facts for translation');
  console.log('  node manual_translate_facts.js update  - Update facts with translations');
}