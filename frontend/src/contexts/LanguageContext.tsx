import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Language = 'EN' | 'HI';

interface LanguageContextType {
  language: Language;
  setLanguage: (language: Language) => void;
  toggleLanguage: () => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Translation type
type TranslationKeys = {
  [key: string]: string;
};

type Translations = {
  EN: TranslationKeys;
  HI: TranslationKeys;
};

// Translations for the landing page
const translations: Translations = {
  EN: {
    // Header
    'site.name': 'SantVaani',
    'beta.banner': '‚ú® Beta Version - Your feedback helps us improve',
    'beta.badge': 'Beta',

    // Hero Section
    'hero.welcome': 'Welcome to SantVaani',
    'hero.subtitle': 'Discover Divine Wisdom',
    'hero.description': 'Journey through the sacred teachings of India\'s greatest spiritual masters',

    // Features Section
    'features.title': 'Explore Sacred Wisdom',
    'features.subtitle': 'Journey through the rich spiritual heritage of India through our carefully curated collection of saints, teachings, and divine forms.',
    'features.saints.title': 'Great Saints',
    'features.saints.description': 'Discover the life stories and teachings of legendary saints like Meera Bai, Kabir Das, and Tulsidas',
    'features.living.title': 'Living Saints',
    'features.living.description': 'Connect with contemporary spiritual masters who continue to spread divine wisdom',
    'features.divine.title': 'Divine Forms',
    'features.divine.description': 'Explore the sacred forms of the divine and understand their deeper meanings',
    'features.bhajans.title': 'Bhajans & Quotes',
    'features.bhajans.description': 'Immerse yourself in devotional songs and inspiring spiritual quotes',
    'features.horoscope.title': 'Daily Horoscope',
    'features.horoscope.description': 'Get personalized daily, weekly, and monthly astrological predictions',

    // Live Bhajan Section
    'live.title': 'üé¨ Live Bhajan Stream',
    'live.subtitle': 'Watch devotional bhajans and spiritual content streaming live',
    'live.button': 'Watch Live Bhajans',
    'live.description': 'Experience devotional bhajans and spiritual videos streaming live from YouTube',
    'live.status': 'LIVE NOW',

    // Mission Section
    'mission.title': 'Our Sacred Mission',
    'mission.description': 'SantVaani is dedicated to preserving and sharing the timeless wisdom of India\'s greatest spiritual masters. We believe that in today\'s fast-paced world, the teachings of these enlightened souls can provide guidance, peace, and direction to seekers on their spiritual journey.',
    'mission.beta.notice': 'üõ†Ô∏è Beta Version Notice: We are continuously improving SantVaani. Your feedback and suggestions help us enhance your spiritual journey experience.',
    'mission.quote.sanskrit': '"‡§ú‡§π‡§æ‡§Å ‡§≠‡§ï‡•ç‡§§‡§ø ‡§π‡•à, ‡§µ‡§π‡§æ‡§Å ‡§∂‡§ï‡•ç‡§§‡§ø ‡§π‡•à"',
    'mission.quote.english': '"Where there is devotion, there is divine power"',
    'mission.learn.more': 'Learn More About Us',
    'mission.feedback': 'Share Feedback',
  },
  HI: {
    // Header
    'site.name': '‡§∏‡§Ç‡§§‡§µ‡§æ‡§£‡•Ä',
    'beta.banner': '‚ú® ‡§¨‡•Ä‡§ü‡§æ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ - ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡§Æ‡•á‡§Ç ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§§‡•Ä ‡§π‡•à',
    'beta.badge': '‡§¨‡•Ä‡§ü‡§æ',

    // Hero Section
    'hero.welcome': '‡§∏‡§Ç‡§§‡§µ‡§æ‡§£‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    'hero.subtitle': '‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'hero.description': '‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§Æ‡§π‡§æ‡§®‡§§‡§Æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ó‡•Å‡§∞‡•Å‡§ì‡§Ç ‡§ï‡•Ä ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç',

    // Features Section
    'features.title': '‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'features.subtitle': '‡§∏‡§Ç‡§§‡•ã‡§Ç, ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§∞‡•Ç‡§™‡•ã‡§Ç ‡§ï‡•á ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ö‡•Å‡§®‡•á ‡§ó‡§è ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§ ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§',
    'features.saints.title': '‡§Æ‡§π‡§æ‡§® ‡§∏‡§Ç‡§§',
    'features.saints.description': '‡§Æ‡•Ä‡§∞‡§æ ‡§¨‡§æ‡§à, ‡§ï‡§¨‡•Ä‡§∞ ‡§¶‡§æ‡§∏ ‡§î‡§∞ ‡§§‡•Å‡§≤‡§∏‡•Ä‡§¶‡§æ‡§∏ ‡§ú‡•à‡§∏‡•á ‡§Æ‡§π‡§æ‡§® ‡§∏‡§Ç‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡•Ä‡§µ‡§® ‡§ó‡§æ‡§•‡§æ ‡§î‡§∞ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'features.living.title': '‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§∏‡§Ç‡§§',
    'features.living.description': '‡§∏‡§Æ‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ó‡•Å‡§∞‡•Å‡§ì‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§ú‡•ã ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§´‡•à‡§≤‡§æ‡§®‡§æ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç',
    'features.divine.title': '‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§∞‡•Ç‡§™',
    'features.divine.description': '‡§™‡§∞‡§Æ‡§æ‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§∞‡•Ç‡§™‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§â‡§®‡§ï‡•á ‡§ó‡§π‡§∞‡•á ‡§Ö‡§∞‡•ç‡§•‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç',
    'features.bhajans.title': '‡§≠‡§ú‡§® ‡§î‡§∞ ‡§â‡§¶‡•ç‡§ß‡§∞‡§£',
    'features.bhajans.description': '‡§≠‡§ï‡•ç‡§§‡§ø ‡§ó‡•Ä‡§§‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ‡§¶‡§æ‡§Ø‡§ï ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§â‡§¶‡•ç‡§ß‡§∞‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§°‡•Å‡§¨‡•ã‡§è‡§Ç',
    'features.horoscope.title': '‡§¶‡•à‡§®‡§ø‡§ï ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤',
    'features.horoscope.description': '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§¶‡•à‡§®‡§ø‡§ï, ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§î‡§∞ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑‡•Ä‡§Ø ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',

    // Live Bhajan Section
    'live.title': 'üé¨ ‡§≤‡§æ‡§á‡§µ ‡§≠‡§ú‡§® ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ',
    'live.subtitle': '‡§≠‡§ï‡•ç‡§§‡§ø ‡§≠‡§ú‡§® ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§≤‡§æ‡§á‡§µ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ç‡§ó ‡§¶‡•á‡§ñ‡•á‡§Ç',
    'live.button': '‡§≤‡§æ‡§á‡§µ ‡§≠‡§ú‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç',
    'live.description': 'YouTube ‡§∏‡•á ‡§≤‡§æ‡§á‡§µ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ç‡§ó ‡§≠‡§ï‡•ç‡§§‡§ø ‡§≠‡§ú‡§® ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞‡•á‡§Ç',
    'live.status': '‡§Ö‡§≠‡•Ä ‡§≤‡§æ‡§á‡§µ',

    // Mission Section
    'mission.title': '‡§π‡§Æ‡§æ‡§∞‡§æ ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§Æ‡§ø‡§∂‡§®',
    'mission.description': '‡§∏‡§Ç‡§§‡§µ‡§æ‡§£‡•Ä ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§Æ‡§π‡§æ‡§®‡§§‡§Æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ó‡•Å‡§∞‡•Å‡§ì‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§≤‡§æ‡§§‡•Ä‡§§ ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•ã ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§Æ‡§æ‡§®‡§®‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡•á‡§ú‡§º ‡§ó‡§§‡§ø ‡§µ‡§æ‡§≤‡•Ä ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç, ‡§á‡§® ‡§™‡•ç‡§∞‡§¨‡•Å‡§¶‡•ç‡§ß ‡§Ü‡§§‡•ç‡§Æ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§è‡§Ç ‡§∏‡§æ‡§ß‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§â‡§®‡§ï‡•Ä ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®, ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§î‡§∞ ‡§¶‡§ø‡§∂‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç‡•§',
    'mission.beta.notice': 'üõ†Ô∏è ‡§¨‡•Ä‡§ü‡§æ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ: ‡§π‡§Æ ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§∏‡§Ç‡§§‡§µ‡§æ‡§£‡•Ä ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§',
    'mission.quote.sanskrit': '"‡§ú‡§π‡§æ‡§Å ‡§≠‡§ï‡•ç‡§§‡§ø ‡§π‡•à, ‡§µ‡§π‡§æ‡§Å ‡§∂‡§ï‡•ç‡§§‡§ø ‡§π‡•à"',
    'mission.quote.english': '"‡§ú‡§π‡§æ‡§Å ‡§≠‡§ï‡•ç‡§§‡§ø ‡§π‡•à, ‡§µ‡§π‡§æ‡§Å ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø ‡§π‡•à"',
    'mission.learn.more': '‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç',
    'mission.feedback': '‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
  }
};

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('EN');

  // Load language from localStorage on mount
  useEffect(() => {
    const savedLanguage = localStorage.getItem('santvaani-language') as Language;
    if (savedLanguage && (savedLanguage === 'EN' || savedLanguage === 'HI')) {
      setLanguage(savedLanguage);
    }
  }, []);

  // Save language to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('santvaani-language', language);
  }, [language]);

  const toggleLanguage = () => {
    setLanguage(current => current === 'EN' ? 'HI' : 'EN');
  };

  const t = (key: string): string => {
    const translation = translations[language]?.[key];
    if (translation) {
      return translation;
    }
    // Fallback to English if key not found in current language
    const englishTranslation = translations['EN']?.[key];
    if (englishTranslation) {
      return englishTranslation;
    }
    // Last resort: return the key itself
    console.warn(`Translation missing for key: ${key}`);
    return key;
  };

  const value: LanguageContextType = {
    language,
    setLanguage,
    toggleLanguage,
    t
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};