import { useState, useEffect } from 'react';

export interface MantraContent {
  id: string;
  sanskrit: string;
  transliteration: string;
  meaning: string;
  meaningHi: string;
  deity: string;
  deityHi: string;
  benefits: string;
  benefitsHi: string;
  audioUrl?: string;
  category: 'morning' | 'evening' | 'meditation' | 'protection' | 'prosperity';
}

export interface SpiritualQuote {
  id: string;
  quote: string;
  quoteHi?: string;
  author: string;
  authorHi?: string;
  source?: string;
  category: string;
}

export interface FestivalInfo {
  id: string;
  name: string;
  nameHi: string;
  date: string;
  daysLeft: number;
  significance: string;
  significanceHi: string;
  rituals: string[];
  ritualsHi: string[];
  category: 'major' | 'regional' | 'vrat' | 'seasonal';
}

export interface TodaysContent {
  mantra: MantraContent;
  quote: SpiritualQuote;
  festivals: FestivalInfo[];
  specialDay?: {
    name: string;
    nameHi: string;
    description: string;
    descriptionHi: string;
  };
}

export const useSpiritualContent = () => {
  const [todaysContent, setTodaysContent] = useState<TodaysContent | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Curated mantras for different times
  const mantras: MantraContent[] = [
    {
      id: 'om-namah-shivaya',
      sanskrit: '‡•ê ‡§®‡§Æ‡§É ‡§∂‡§ø‡§µ‡§æ‡§Ø',
      transliteration: 'Om Namah Shivaya',
      meaning: 'I bow to Shiva, the supreme consciousness',
      meaningHi: '‡§Æ‡•à‡§Ç ‡§∂‡§ø‡§µ ‡§ï‡•ã ‡§®‡§Æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å, ‡§ú‡•ã ‡§™‡§∞‡§Æ ‡§ö‡•á‡§§‡§®‡§æ ‡§π‡•à‡§Ç',
      deity: 'Lord Shiva',
      deityHi: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§∂‡§ø‡§µ',
      benefits: 'Inner peace, spiritual awakening, removal of negative energy',
      benefitsHi: '‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§∂‡§æ‡§Ç‡§§‡§ø, ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ú‡§æ‡§ó‡•É‡§§‡§ø, ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ä‡§∞‡•ç‡§ú‡§æ ‡§ï‡§æ ‡§®‡§æ‡§∂',
      category: 'meditation'
    },
    {
      id: 'gayatri-mantra',
      sanskrit: '‡•ê ‡§≠‡•Ç‡§∞‡•ç‡§≠‡•Å‡§µ‡§É ‡§∏‡•ç‡§µ‡§É ‡§§‡§§‡•ç‡§∏‡§µ‡§ø‡§§‡•Å‡§∞‡•ç‡§µ‡§∞‡•á‡§£‡•ç‡§Ø‡§Ç ‡§≠‡§∞‡•ç‡§ó‡•ã ‡§¶‡•á‡§µ‡§∏‡•ç‡§Ø ‡§ß‡•Ä‡§Æ‡§π‡§ø ‡§ß‡§ø‡§Ø‡•ã ‡§Ø‡•ã ‡§®‡§É ‡§™‡•ç‡§∞‡§ö‡•ã‡§¶‡§Ø‡§æ‡§§‡•ç',
      transliteration: 'Om Bhur Bhuva·∏• Swa·∏• Tat-savitur Vare·πáya·πÉ Bhargo Devasya Dhƒ´mahi Dhiyo Yo Na·∏• PrachodayƒÅt',
      meaning: 'We meditate on the divine light that illuminates all realms',
      meaningHi: '‡§π‡§Æ ‡§â‡§∏ ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§∏‡§≠‡•Ä ‡§≤‡•ã‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
      deity: 'Goddess Gayatri',
      deityHi: '‡§Æ‡§æ‡§§‡§æ ‡§ó‡§æ‡§Ø‡§§‡•ç‡§∞‡•Ä',
      benefits: 'Wisdom, spiritual illumination, mental clarity',
      benefitsHi: '‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø, ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂, ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ',
      category: 'morning'
    },
    {
      id: 'maha-mrityunjaya',
      sanskrit: '‡•ê ‡§§‡•ç‡§∞‡•ç‡§Ø‡§Æ‡•ç‡§¨‡§ï‡§Ç ‡§Ø‡§ú‡§æ‡§Æ‡§π‡•á ‡§∏‡•Å‡§ó‡§®‡•ç‡§ß‡§ø‡§Ç ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø‡§µ‡§∞‡•ç‡§ß‡§®‡§Æ‡•ç ‡§â‡§∞‡•ç‡§µ‡§æ‡§∞‡•Å‡§ï‡§Æ‡§ø‡§µ ‡§¨‡§®‡•ç‡§ß‡§®‡§æ‡§®‡•ç‡§Æ‡•É‡§§‡•ç‡§Ø‡•ã‡§∞‡•ç‡§Æ‡•Å‡§ï‡•ç‡§∑‡•Ä‡§Ø ‡§Æ‡§æ‡§Ω‡§Æ‡•É‡§§‡§æ‡§§‡•ç',
      transliteration: 'Om Tryambakam Yajamahe Sugandhim Pushtivardhanam Urvarukamiva Bandhanan Mrityor Mukshiya Maamritat',
      meaning: 'We worship the three-eyed Lord who is fragrant and nourishes all',
      meaningHi: '‡§π‡§Æ ‡§§‡•ç‡§∞‡§ø‡§®‡•á‡§§‡•ç‡§∞‡§ß‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§≠‡•Å ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§∏‡•Å‡§ó‡§Ç‡§ß‡§ø‡§§ ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§≠‡•Ä ‡§ï‡§æ ‡§™‡•ã‡§∑‡§£ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç',
      deity: 'Lord Shiva',
      deityHi: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§∂‡§ø‡§µ',
      benefits: 'Healing, protection from diseases, spiritual strength',
      benefitsHi: '‡§â‡§™‡§ö‡§æ‡§∞, ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ, ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø',
      category: 'protection'
    }
  ];

  const quotes: SpiritualQuote[] = [
    {
      id: 'buddha-mind',
      quote: 'The mind is everything. What you think you become.',
      quoteHi: '‡§Æ‡§® ‡§π‡•Ä ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ú‡•ã ‡§∏‡•ã‡§ö‡§§‡•á ‡§π‡•à‡§Ç, ‡§µ‡§π‡•Ä ‡§¨‡§® ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§',
      author: 'Buddha',
      authorHi: '‡§¨‡•Å‡§¶‡•ç‡§ß',
      category: 'wisdom'
    },
    {
      id: 'krishna-dharma',
      quote: 'It is better to live your own dharma imperfectly than to live an imitation of somebody else\'s life with perfection.',
      quoteHi: '‡§Ö‡§™‡§®‡•á ‡§ß‡§∞‡•ç‡§Æ ‡§ï‡§æ ‡§Ö‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§ï‡§≤ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à‡•§',
      author: 'Lord Krishna',
      authorHi: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡•É‡§∑‡•ç‡§£',
      source: 'Bhagavad Gita',
      category: 'dharma'
    },
    {
      id: 'rumi-love',
      quote: 'Let yourself be silently drawn by the strange pull of what you really love. It will not lead you astray.',
      author: 'Rumi',
      category: 'love'
    },
    {
      id: 'kabir-truth',
      quote: 'Wherever you are, and whatever you do, be in love.',
      quoteHi: '‡§ú‡§π‡§æ‡§Å ‡§≠‡•Ä ‡§π‡•ã‡§Ç, ‡§ú‡•ã ‡§≠‡•Ä ‡§ï‡§∞‡•á‡§Ç, ‡§™‡•ç‡§∞‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§∞‡§π‡•á‡§Ç‡•§',
      author: 'Kabir Das',
      authorHi: '‡§ï‡§¨‡•Ä‡§∞ ‡§¶‡§æ‡§∏',
      category: 'love'
    }
  ];

  const upcomingFestivals: FestivalInfo[] = [
    {
      id: 'diwali-2024',
      name: 'Diwali',
      nameHi: '‡§¶‡§ø‡§µ‡§æ‡§≤‡•Ä',
      date: '2024-11-01',
      daysLeft: 15,
      significance: 'Festival of Lights celebrating the victory of light over darkness',
      significanceHi: '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§ï‡§æ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§ú‡•ã ‡§Ö‡§Ç‡§ß‡§ï‡§æ‡§∞ ‡§™‡§∞ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§ï‡•Ä ‡§µ‡§ø‡§ú‡§Ø ‡§Æ‡§®‡§æ‡§§‡§æ ‡§π‡•à',
      rituals: ['Light diyas', 'Lakshmi Puja', 'Share sweets', 'Clean homes'],
      ritualsHi: ['‡§¶‡•Ä‡§™ ‡§ú‡§≤‡§æ‡§®‡§æ', '‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§™‡•Ç‡§ú‡§æ', '‡§Æ‡§ø‡§†‡§æ‡§à ‡§¨‡§æ‡§Ç‡§ü‡§®‡§æ', '‡§ò‡§∞ ‡§ï‡•Ä ‡§∏‡§´‡§æ‡§à'],
      category: 'major'
    },
    {
      id: 'karva-chauth-2024',
      name: 'Karva Chauth',
      nameHi: '‡§ï‡§∞‡§µ‡§æ ‡§ö‡•å‡§•',
      date: '2024-10-25',
      daysLeft: 8,
      significance: 'Fast observed by married women for husband\'s long life',
      significanceHi: '‡§µ‡§ø‡§µ‡§æ‡§π‡§ø‡§§ ‡§Æ‡§π‡§ø‡§≤‡§æ‡§ì‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§™‡§§‡§ø ‡§ï‡•Ä ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§æ‡§Ø‡•Å ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§µ‡•ç‡§∞‡§§',
      rituals: ['Fast from sunrise to moonrise', 'Mehendi', 'Traditional attire', 'Moon worship'],
      ritualsHi: ['‡§∏‡•Ç‡§∞‡•ç‡§Ø‡•ã‡§¶‡§Ø ‡§∏‡•á ‡§ö‡§æ‡§Ç‡§¶‡•ç‡§∞‡•ã‡§¶‡§Ø ‡§§‡§ï ‡§â‡§™‡§µ‡§æ‡§∏', '‡§Æ‡•á‡§π‡§Ç‡§¶‡•Ä', '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞', '‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§™‡•Ç‡§ú‡§æ'],
      category: 'vrat'
    }
  ];

  useEffect(() => {
    const fetchTodaysContent = async () => {
      try {
        setLoading(true);
        
        // Fetch from your backend API
        const response = await fetch('http://localhost:5000/api/daily-guide/complete');
        const data = await response.json();
        
        if (data.success) {
          console.log('üî• Backend data received:', data.data);
          
          // Transform backend festival data to match frontend interface
          const transformedFestivals = (data.data.upcomingFestivals || []).map((festival: any) => ({
            id: festival.name.toLowerCase().replace(/\s+/g, '-'),
            name: festival.name,
            nameHi: festival.name, // Use same for now
            date: festival.date,
            daysLeft: festival.days,
            significance: festival.description || festival.significance,
            significanceHi: festival.description || festival.significance,
            rituals: ['Traditional prayers', 'Special offerings', 'Family gatherings'],
            ritualsHi: ['‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§™‡•ç‡§∞‡§æ‡§∞‡•ç‡§•‡§®‡§æ', '‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶', '‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡§≠‡§æ'],
            category: festival.type === 'Major Festival' ? 'major' as const : 
                     festival.type === 'Vrat' ? 'vrat' as const : 'regional' as const,
            isToday: festival.isToday,
            isTomorrow: festival.isTomorrow,
            isThisWeek: festival.isThisWeek
          }));


          // Transform backend mantra data
          const transformedMantra = data.data.todaysMantra ? {
            id: 'backend-mantra',
            sanskrit: data.data.todaysMantra.text || data.data.todaysMantra.sanskrit,
            transliteration: data.data.todaysMantra.text_english || data.data.todaysMantra.transliteration,
            meaning: data.data.todaysMantra.meaning || 'Divine blessing for today',
            meaningHi: data.data.todaysMantra.meaning_hi || '‡§Ü‡§ú ‡§ï‡§æ ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶',
            deity: 'Divine',
            deityHi: '‡§¶‡§ø‡§µ‡•ç‡§Ø',
            benefits: 'Spiritual growth and inner peace',
            benefitsHi: '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§î‡§∞ ‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§∂‡§æ‡§Ç‡§§‡§ø',
            category: 'morning' as const
          } : mantras[0];

          // Use real backend data
          const content: TodaysContent = {
            mantra: transformedMantra,
            quote: quotes[new Date().getDay() % quotes.length], // Keep quotes as mock for now
            festivals: transformedFestivals,
            specialDay: data.data.specialMessage ? {
              name: 'Today\'s Blessing',
              nameHi: '‡§Ü‡§ú ‡§ï‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶',
              description: data.data.specialMessage,
              descriptionHi: data.data.specialMessage
            } : getSpecialDay(new Date())
          };
          
          console.log('‚úÖ Transformed content:', content);
          setTodaysContent(content);
        } else {
          // Fallback to mock data
          const today = new Date();
          const dayIndex = today.getDay();
          const content: TodaysContent = {
            mantra: mantras[dayIndex % mantras.length],
            quote: quotes[dayIndex % quotes.length],
            festivals: upcomingFestivals,
            specialDay: getSpecialDay(today)
          };
          setTodaysContent(content);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('API Error, using fallback data:', err);
        // Fallback to mock data
        const today = new Date();
        const dayIndex = today.getDay();
        const content: TodaysContent = {
          mantra: mantras[dayIndex % mantras.length],
          quote: quotes[dayIndex % quotes.length],
          festivals: upcomingFestivals,
          specialDay: getSpecialDay(today)
        };
        setTodaysContent(content);
        setError('Using offline data');
        setLoading(false);
      }
    };

    fetchTodaysContent();
  }, []);

  const getSpecialDay = (date: Date) => {
    const day = date.getDay();
    const dayOfMonth = date.getDate();
    
    // Check for Ekadashi (11th day of lunar month - simplified)
    if (dayOfMonth === 11 || dayOfMonth === 26) {
      return {
        name: 'Ekadashi',
        nameHi: '‡§è‡§ï‡§æ‡§¶‡§∂‡•Ä',
        description: 'Auspicious day for fasting and spiritual practices',
        descriptionHi: '‡§â‡§™‡§µ‡§æ‡§∏ ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∏‡§æ‡§ß‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡•Å‡§≠ ‡§¶‡§ø‡§®'
      };
    }
    
    // Check for special weekdays
    if (day === 1) { // Monday
      return {
        name: 'Somvar',
        nameHi: '‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞',
        description: 'Day dedicated to Lord Shiva',
        descriptionHi: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§∂‡§ø‡§µ ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§¶‡§ø‡§®'
      };
    }
    
    if (day === 5) { // Friday
      return {
        name: 'Shukravar',
        nameHi: '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞',
        description: 'Day dedicated to Goddess Lakshmi',
        descriptionHi: '‡§Æ‡§æ‡§§‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§¶‡§ø‡§®'
      };
    }
    
    return undefined;
  };

  const getMantraByCategory = (category: MantraContent['category']) => {
    return mantras.filter(mantra => mantra.category === category);
  };

  const getRandomQuote = () => {
    return quotes[Math.floor(Math.random() * quotes.length)];
  };

  return {
    todaysContent,
    loading,
    error,
    getMantraByCategory,
    getRandomQuote,
    mantras,
    quotes,
    festivals: upcomingFestivals
  };
};